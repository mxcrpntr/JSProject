{"version":3,"file":"main.js","mappings":"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","sources":["webpack://jsproject/webpack/bootstrap","webpack://jsproject/./src/scripts/word_node.js","webpack://jsproject/./src/scripts/word_ladder.js","webpack://jsproject/./src/index.js","webpack://jsproject/./src/scripts/example.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz'.split(\"\");\n\nexport default class WordNode {\n    constructor(word,parent,dictionary) {\n        this.word = word;\n        this.parent = parent;\n        this.dictionary = dictionary;\n        this.children = [];\n        this.nextRungWords = this.nextRungWords.bind(this);\n        this.addRungChildren.bind(this)();\n        this.anagrams = anagrams(this.word);\n        this.addLetterWords = this.addLetterWords.bind(this);\n        this.removeLetterWords = this.removeLetterWords.bind(this);\n    }\n    addChild(newWord) {\n        const child = new WordNode(newWord,this);\n        this.children.push(child);\n    }\n    removeChild(child) {\n        const childIdx = this.children.indexOf(child);\n        if (childIdx >= 0 && childIdx < this.children.length) {\n            this.children.splice(childIdx,1);\n        }\n    }\n    nextRungWords() {\n        const nextRungWords = [];\n        for (let i = 0; i < this.word.length; i++) {\n            let beforeStr = this.word.slice(0,i);\n            let afterStr = this.word.slice(i+1);\n            for (let j = 0; j < ALPHA.length; j++) {\n                let newStr = beforeStr.split(\"\")\n                            .concat([ALPHA[j]])\n                            .concat(afterStr.split(\"\"))\n                            .join(\"\");\n                if (this.dictionary.includes(newstr)) nextRungWords.push(newStr);\n            }\n        }\n        return nextRungWords;\n    }\n    addRungChildren() {\n        this.nextRungWords().forEach(nextWord => {\n            const nextNode = new WordNode(nextWord, this, this.dictionary);\n            this.addChild(nextNode);\n        })\n    }\n    addAnagramChildren() {\n        this.anagrams.forEach(anagram => {\n            const nextNode = new WordNode(anagram, this, this.dictionary);\n            this.addChild(nextNode);\n        })\n    }\n    addLetterWords() {\n        const addLetterWords = [];\n        for (let i = 0; i < this.word.length; i++) {\n            for (let j = 0; j < ALPHA.length; j++) {\n                let beforeStr = this.word.slice(0,i);\n                let afterStr = this.word.slice(i);\n                for (let j = 0; j < ALPHA.length; j++) {\n                    let newStr = beforeStr.split(\"\")\n                                .concat([ALPHA[j]])\n                                .concat(afterStr.split(\"\"))\n                                .join(\"\");\n                    if (this.dictionary.includes(newstr)) addLetterWords.push(newStr);\n                }\n            }\n        }\n        return addLetterWords;\n    }\n    removeLetterWords() {\n        const removeLetterWords = [];\n        for (let i = 0; i < this.word.length; i++) {\n            for (let j = 0; j < ALPHA.length; j++) {\n                let beforeStr = this.word.slice(0,i);\n                let afterStr = this.word.slice(i+1);\n                let newStr = beforeStr.split(\"\")\n                            .concat(afterStr.split(\"\"))\n                            .join(\"\");\n                if (this.dictionary.includes(newstr)) removeLetterWords.push(newStr);\n            }\n        }\n        return removeLetterWords;\n    }\n    addAddRemoveChildren() {\n        this.addLetterWords().forEach(addWord => {\n            const nextNode = new WordNode(addWord, this, this.dictionary);\n            this.addChild(nextNode);\n        })\n        this.removeLetterWords().forEach(removeWord => {\n            const nextNode = new WordNode(removeWord, this, this.dictionary);\n            this.addChild(nextNode);\n        })\n    }\n}\n\nfunction anagrams(word) {\n    const anagrams = [];\n    perms(word).forEach(str => {\n        if (this.dictionary.includes(str) && str != word) {\n            anagrams.push(str);\n        }\n    })\n    return anagrams;\n}\n\nfunction perms(word) {\n    if (word.length == 0) return [];\n    if (word.length == 1) return [word];\n    let permsArr = [];\n    for (let i = 0; i < word.length; i++) {\n\n        let newArr = word.split(\"\");\n        newArr.splice(i,1);\n        let shorterPerms = perms(newArr.join(\"\"));\n\n        let iLetterArr = word.split(\"\").slice(i,i+1);\n \n        let iPerms = shorterPerms.map(perm => iLetterArr.concat(perm.split(\"\")).join(\"\"));\n        permsArr = permsArr.concat(iPerms);\n    }\n    return permsArr;\n}","import WordNode from \"./word_node.js\";\n\n\n\nvar fs = require(\"fs\");\nvar dictionaryStr = fs.readFile(\"../dictionary.txt\");\nvar dictionaryArr = dictionaryStr.split(\"\\n\");\n\nexport default class WordLadder {\n    constructor(startWord,endWord) {\n        this.startWord = startWord;\n        this.endWord = endWord;\n        this.dictionary = dictionaryArr;\n    }\n    shortestLadder(anagrams=false,addRemove=false) {\n        if (this.startWord.length != this.endWord.length && !addRemove) {\n            return undefined;\n        }\n        const startNode = new WordNode(this.startWord,null,this.dictionary);\n        if (anagrams) {\n            startNode.addAnagramChildren();   \n        }\n        if (addRemove) {\n            startNode.addAddRemoveChildren();   \n        }\n        const alreadySeenWords = [];\n        const visitQueue = startNode.children;\n        while (visitQueue.length > 0) {\n            let currentNode = visitQueue.shift;\n            if (currentNode.word === endWord) {\n                break;\n            }\n            currentNode.children.forEach(childNode => {\n                if (!alreadySeenWords.includes(childNode.word)) {\n                    visitQueue.push(childNode);\n                }\n            })\n            alreadySeenWords.push(currentNode.word);\n        }\n        if (currentNode.word === endWord) {\n            let parent = currentNode.parent;\n            let node = currentNode;\n            let ladder = [];\n            while (parent != null) {\n                ladder.shift(node.word);\n                node = parent;\n                parent = node.parent;\n            }\n            return ladder;\n        }\n        return undefined;\n    }\n}","import Example from \"./scripts/example\"\nimport WordLadder from \"./scripts/word_ladder\"\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const main = document.getElementById(\"main\")\n    new Example(main)\n    window.WordLadder = WordLadder\n})","class Example {\n    constructor(ele) {\n        this.ele = ele;\n        this.ele.innerHTML = \"<h1>It's ALIVE!!!</h1>\";\n        this.handleClick = this.handleClick.bind(this);\n        this.ele.addEventListener(\"click\", this.handleClick);\n\n    }\n\n    handleClick() {\n        this.ele.children[0].innerText = \"Ouch!\";\n    }\n}\n\nexport default Example;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","ALPHA","split","WordNode","constructor","word","parent","dictionary","this","children","nextRungWords","bind","addRungChildren","anagrams","perms","forEach","str","includes","push","addLetterWords","removeLetterWords","addChild","newWord","child","removeChild","childIdx","indexOf","length","splice","i","beforeStr","slice","afterStr","j","newStr","concat","join","newstr","nextWord","nextNode","addAnagramChildren","anagram","addAddRemoveChildren","addWord","removeWord","permsArr","newArr","shorterPerms","iLetterArr","iPerms","map","perm","dictionaryArr","require","readFile","WordLadder","startWord","endWord","shortestLadder","arguments","addRemove","startNode","alreadySeenWords","visitQueue","currentNode","shift","childNode","node","ladder","document","addEventListener","main","getElementById","ele","innerHTML","handleClick","innerText","window"],"sourceRoot":""}